// Teste para verificar se o limite de 1000 registros foi removido
// Execute no console do navegador em http://localhost:3000/reports

console.log('üß™ TESTE: Verificando remo√ß√£o do limite de 1000 registros')

async function testCashbackNoLimit() {
  console.log('\nüöÄ Testando se o limite foi removido...')
  
  // Teste 1: Per√≠odo amplo que deve retornar mais de 1000 registros
  console.log('\n1Ô∏è‚É£ Teste: Per√≠odo amplo (ano todo 2024)')
  await testNoLimit('Ano todo 2024', '2024-01-01', '2024-12-31')
  
  // Teste 2: Sem filtros de data (deve retornar todos os dados)
  console.log('\n2Ô∏è‚É£ Teste: Sem filtros de data (todos os dados)')
  await testNoLimit('Todos os dados', '', '')
  
  // Teste 3: Per√≠odo de v√°rios anos
  console.log('\n3Ô∏è‚É£ Teste: M√∫ltiplos anos (2023-2024)')
  await testNoLimit('2023-2024', '2023-01-01', '2024-12-31')
  
  console.log('\nüèÅ Testes de limite conclu√≠dos!')
}

async function testNoLimit(testName, startDate, endDate) {
  console.log(`\nüîç Testando: ${testName}`)
  console.log(`   Per√≠odo: ${startDate || 'N√£o definido'} at√© ${endDate || 'N√£o definido'}`)
  
  try {
    const startTime = Date.now()
    
    const response = await fetch('/api/reports/cashback', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({
        selectedFields: ['Nome', 'Whatsapp', 'Loja', 'Envio_novo', 'Status'],
        startDate: startDate,
        endDate: endDate,
        selectedStore: ''
      })
    })
    
    const endTime = Date.now()
    const duration = endTime - startTime
    
    if (response.ok) {
      const result = await response.json()
      const totalRecords = result.data?.length || 0
      
      console.log(`   ‚úÖ Resultado: ${totalRecords} registros`)
      console.log(`   ‚è±Ô∏è Tempo de resposta: ${duration}ms`)
      
      // Verificar se ultrapassou o limite anterior de 1000
      if (totalRecords > 1000) {
        console.log(`   üéâ SUCESSO: Limite removido! Retornou ${totalRecords} registros (mais que 1000)`)
      } else if (totalRecords === 1000) {
        console.log(`   ‚ö†Ô∏è ATEN√á√ÉO: Exatamente 1000 registros - pode ainda ter limite`)
      } else {
        console.log(`   ‚ÑπÔ∏è INFO: ${totalRecords} registros (menos que 1000, normal para este per√≠odo)`)
      }
      
      if (result.data && result.data.length > 0) {
        // Analisar distribui√ß√£o de datas
        const datesInData = result.data
          .filter(item => item.Envio_novo)
          .map(item => item.Envio_novo.split('T')[0])
          .sort()
        
        if (datesInData.length > 0) {
          console.log(`   üìÖ Primeira data: ${datesInData[0]}`)
          console.log(`   üìÖ √öltima data: ${datesInData[datesInData.length - 1]}`)
          
          // Mostrar distribui√ß√£o por ano
          const yearDistribution = datesInData.reduce((acc, date) => {
            const year = date.substring(0, 4)
            acc[year] = (acc[year] || 0) + 1
            return acc
          }, {})
          
          console.log(`   üìä Distribui√ß√£o por ano:`, yearDistribution)
          
          // Verificar se h√° dados de m√∫ltiplos anos (indicativo de que n√£o h√° limite)
          const years = Object.keys(yearDistribution)
          if (years.length > 1) {
            console.log(`   üéØ INDICATIVO: Dados de ${years.length} anos diferentes - limite provavelmente removido`)
          }
        }
        
        // Analisar performance
        if (duration > 5000) {
          console.log(`   ‚ö†Ô∏è PERFORMANCE: Resposta demorou ${duration}ms - considere otimiza√ß√µes`)
        } else if (duration > 2000) {
          console.log(`   ‚è±Ô∏è PERFORMANCE: Resposta em ${duration}ms - aceit√°vel`)
        } else {
          console.log(`   ‚ö° PERFORMANCE: Resposta r√°pida em ${duration}ms`)
        }
      }
    } else {
      const error = await response.json()
      console.log(`   ‚ùå Erro: ${error.error}`)
    }
  } catch (error) {
    console.log(`   üí• Erro na requisi√ß√£o: ${error.message}`)
  }
  
  // Aguardar um pouco entre os testes
  await new Promise(resolve => setTimeout(resolve, 1000))
}

// Fun√ß√£o para comparar antes e depois
async function compareLimitRemoval() {
  console.log('\nüîÑ COMPARA√á√ÉO: Testando diferentes cen√°rios para confirmar remo√ß√£o do limite')
  
  const scenarios = [
    { name: 'Janeiro 2024', startDate: '2024-01-01', endDate: '2024-01-31' },
    { name: 'Primeiro semestre 2024', startDate: '2024-01-01', endDate: '2024-06-30' },
    { name: 'Ano todo 2024', startDate: '2024-01-01', endDate: '2024-12-31' },
    { name: '√öltimos 2 anos', startDate: '2023-01-01', endDate: '2024-12-31' }
  ]
  
  console.log('\nüìä Testando cen√°rios progressivos:')
  
  for (const scenario of scenarios) {
    await testNoLimit(scenario.name, scenario.startDate, scenario.endDate)
  }
  
  console.log('\nüìà An√°lise: Se os n√∫meros aumentam progressivamente, o limite foi removido com sucesso!')
}

// Fun√ß√£o para testar especificamente se ainda h√° limite de 1000
async function testSpecific1000Limit() {
  console.log('\nüéØ TESTE ESPEC√çFICO: Verificando se ainda h√° limite de 1000')
  
  try {
    const response = await fetch('/api/reports/cashback', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      credentials: 'include',
      body: JSON.stringify({
        selectedFields: ['Nome', 'Whatsapp', 'Loja', 'Envio_novo'],
        startDate: '', // Sem filtro para pegar o m√°ximo poss√≠vel
        endDate: '',
        selectedStore: ''
      })
    })
    
    if (response.ok) {
      const result = await response.json()
      const total = result.data?.length || 0
      
      console.log(`üìä Total de registros retornados: ${total}`)
      
      if (total === 1000) {
        console.log('‚ùå PROBLEMA: Ainda h√° limite de 1000 registros!')
        console.log('   Verifique se a corre√ß√£o foi aplicada corretamente')
      } else if (total > 1000) {
        console.log('‚úÖ SUCESSO: Limite de 1000 removido com sucesso!')
        console.log(`   Retornou ${total} registros (${total - 1000} a mais que o limite anterior)`)
      } else {
        console.log(`‚ÑπÔ∏è INFO: ${total} registros (menos que 1000, pode ser normal)`)
        console.log('   Pode n√£o haver mais de 1000 registros na base de dados para esta empresa')
      }
    }
  } catch (error) {
    console.error('üí• Erro no teste:', error)
  }
}

console.log('üí° Fun√ß√µes dispon√≠veis:')
console.log('   testCashbackNoLimit() - Testa v√°rios cen√°rios')
console.log('   compareLimitRemoval() - Compara cen√°rios progressivos')
console.log('   testSpecific1000Limit() - Teste espec√≠fico do limite de 1000')
console.log('\nüîß Execute uma das fun√ß√µes para testar a remo√ß√£o do limite')

// Disponibilizar as fun√ß√µes globalmente
window.testCashbackNoLimit = testCashbackNoLimit
window.compareLimitRemoval = compareLimitRemoval
window.testSpecific1000Limit = testSpecific1000Limit