# Script PowerShell para build e push da imagem Docker
# Build local e push para DockerHub

Write-Host "üöÄ Iniciando build e push da imagem Docker..." -ForegroundColor Green

# Definir vari√°veis
$IMAGE_NAME = "praisetecnologia/praise-shot"
$TAG_LATEST = "latest"
$TAG_DATE = Get-Date -Format "yyyy-MM-dd-HHmm"

Write-Host "üì¶ Informa√ß√µes da imagem:" -ForegroundColor Cyan
Write-Host "- Nome: $IMAGE_NAME" -ForegroundColor White
Write-Host "- Tag Latest: $TAG_LATEST" -ForegroundColor White
Write-Host "- Tag Data: $TAG_DATE" -ForegroundColor White

# Verificar se Docker est√° rodando
Write-Host "üîç Verificando se Docker est√° rodando..." -ForegroundColor Yellow
try {
    docker version | Out-Null
    Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando ou n√£o est√° instalado" -ForegroundColor Red
    exit 1
}

# Limpar builds anteriores (opcional)
Write-Host "üßπ Limpando imagens antigas..." -ForegroundColor Yellow
docker image prune -f

# Build da imagem
Write-Host "üî® Iniciando build da imagem..." -ForegroundColor Yellow
Write-Host "Comando: docker build -t ${IMAGE_NAME}:${TAG_LATEST} -t ${IMAGE_NAME}:${TAG_DATE} ." -ForegroundColor Gray

$buildResult = docker build -t "${IMAGE_NAME}:${TAG_LATEST}" -t "${IMAGE_NAME}:${TAG_DATE}" .

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro no build da imagem" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Build conclu√≠do com sucesso!" -ForegroundColor Green

# Verificar tamanho da imagem
Write-Host "üìä Informa√ß√µes da imagem criada:" -ForegroundColor Cyan
docker images "${IMAGE_NAME}:${TAG_LATEST}"

# Testar a imagem localmente (opcional)
Write-Host "üß™ Testando imagem localmente..." -ForegroundColor Yellow
Write-Host "Iniciando container de teste na porta 3001..." -ForegroundColor Gray

$testContainer = docker run -d -p 3001:3000 --name praise-shot-test "${IMAGE_NAME}:${TAG_LATEST}"

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Container de teste iniciado: $testContainer" -ForegroundColor Green
    Write-Host "üåê Teste local dispon√≠vel em: http://localhost:3001" -ForegroundColor Cyan
    
    # Aguardar um pouco para o container inicializar
    Write-Host "‚è≥ Aguardando container inicializar..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    # Testar se est√° respondendo
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:3001" -TimeoutSec 10 -UseBasicParsing
        if ($response.StatusCode -eq 200) {
            Write-Host "‚úÖ Container est√° respondendo corretamente!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Container respondeu com status: $($response.StatusCode)" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel testar o container: $($_.Exception.Message)" -ForegroundColor Yellow
    }
    
    # Parar e remover container de teste
    Write-Host "üõë Parando container de teste..." -ForegroundColor Yellow
    docker stop praise-shot-test | Out-Null
    docker rm praise-shot-test | Out-Null
    Write-Host "‚úÖ Container de teste removido" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è N√£o foi poss√≠vel iniciar container de teste, mas continuando..." -ForegroundColor Yellow
}

# Push para DockerHub
Write-Host "üì§ Fazendo push para DockerHub..." -ForegroundColor Yellow

# Verificar se est√° logado no DockerHub
Write-Host "üîê Verificando login no DockerHub..." -ForegroundColor Yellow
$loginCheck = docker info 2>&1 | Select-String "Username"
if (-not $loginCheck) {
    Write-Host "‚ö†Ô∏è Voc√™ pode n√£o estar logado no DockerHub" -ForegroundColor Yellow
    Write-Host "Execute: docker login" -ForegroundColor Cyan
    $continue = Read-Host "Continuar mesmo assim? (y/N)"
    if ($continue -ne "y" -and $continue -ne "Y") {
        Write-Host "‚ùå Opera√ß√£o cancelada" -ForegroundColor Red
        exit 1
    }
}

# Push da tag latest
Write-Host "üì§ Fazendo push da tag latest..." -ForegroundColor Yellow
docker push "${IMAGE_NAME}:${TAG_LATEST}"

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro no push da tag latest" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Push da tag latest conclu√≠do!" -ForegroundColor Green

# Push da tag com data
Write-Host "üì§ Fazendo push da tag com data..." -ForegroundColor Yellow
docker push "${IMAGE_NAME}:${TAG_DATE}"

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro no push da tag com data" -ForegroundColor Red
    exit 1
}

Write-Host "‚úÖ Push da tag com data conclu√≠do!" -ForegroundColor Green

# Resumo final
Write-Host "" -ForegroundColor White
Write-Host "üéâ BUILD E PUSH CONCLU√çDOS COM SUCESSO!" -ForegroundColor Green
Write-Host "" -ForegroundColor White
Write-Host "üì¶ Imagens dispon√≠veis no DockerHub:" -ForegroundColor Cyan
Write-Host "- ${IMAGE_NAME}:${TAG_LATEST}" -ForegroundColor White
Write-Host "- ${IMAGE_NAME}:${TAG_DATE}" -ForegroundColor White
Write-Host "" -ForegroundColor White
Write-Host "üîó Links √∫teis:" -ForegroundColor Cyan
Write-Host "- DockerHub: https://hub.docker.com/r/praisetecnologia/praise-shot" -ForegroundColor White
Write-Host "- Pull command: docker pull ${IMAGE_NAME}:${TAG_LATEST}" -ForegroundColor White
Write-Host "" -ForegroundColor White
Write-Host "üöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "1. Atualizar o servi√ßo em produ√ß√£o" -ForegroundColor White
Write-Host "2. Verificar se a corre√ß√£o do webhook funcionou" -ForegroundColor White
Write-Host "3. Testar gera√ß√£o de QR codes" -ForegroundColor White
Write-Host "" -ForegroundColor White

# Mostrar informa√ß√µes da imagem final
Write-Host "üìä Informa√ß√µes finais da imagem:" -ForegroundColor Cyan
docker images "${IMAGE_NAME}" | Select-Object -First 3

Write-Host "‚úÖ Script conclu√≠do!" -ForegroundColor Green