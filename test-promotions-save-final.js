// Teste final para verificar se o salvamento de promo√ß√µes funciona
console.log('üéØ Teste Final: Salvamento de Promo√ß√µes');

const testPromotionsSave = () => {
  console.log('üöÄ Iniciando teste...');
  
  // 1. Verificar se h√° configura√ß√µes de promo√ß√µes
  console.log('üîç Verificando configura√ß√µes existentes...');
  
  // 2. Simular abertura do modal
  console.log('üì± Para testar:');
  console.log('   1. Selecione alguns campos no card de Promo√ß√µes');
  console.log('   2. Clique no bot√£o "Salvar" do card');
  console.log('   3. Digite um nome no modal (ex: "Teste Promo√ß√µes")');
  console.log('   4. Clique no bot√£o "Salvar" do modal');
  console.log('   5. Verifique se aparece nos logs: üéØ [PROMO√á√ïES] Iniciando salvamento...');
  
  // 3. Interceptar logs para verificar se a fun√ß√£o √© chamada
  const originalLog = console.log;
  let promotionsLogFound = false;
  
  console.log = function(...args) {
    const message = args.join(' ');
    if (message.includes('[PROMO√á√ïES]')) {
      promotionsLogFound = true;
      originalLog('‚úÖ FUN√á√ÉO CHAMADA:', ...args);
    } else {
      originalLog(...args);
    }
  };
  
  // Restaurar ap√≥s 30 segundos
  setTimeout(() => {
    console.log = originalLog;
    if (promotionsLogFound) {
      console.log('‚úÖ SUCESSO: Fun√ß√£o de salvamento foi chamada!');
    } else {
      console.log('‚ùå Fun√ß√£o de salvamento n√£o foi chamada ainda');
    }
  }, 30000);
  
  console.log('‚úÖ Intercepta√ß√£o ativa por 30 segundos');
  console.log('üí° Execute o teste manual agora');
};

// Executar automaticamente
testPromotionsSave();

// Disponibilizar globalmente
window.testPromotionsSave = testPromotionsSave;